
YABC_fw_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08000fd4  08000fd4  00001fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001098  08001098  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001098  08001098  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001098  08001098  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001098  08001098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800109c  0800109c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080010a0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080010ac  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080010ac  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000272a  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ce2  00000000  00000000  0000575f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00006448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002bb  00000000  00000000  00006818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001576e  00000000  00000000  00006ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004207  00000000  00000000  0001c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007bb43  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009bf8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d70  00000000  00000000  0009bfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0009cd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08000fbc 	.word	0x08000fbc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08000fbc 	.word	0x08000fbc

0800014c <enable_gpio_clocks>:
/**
 * @brief Enables the GPIO clocks for ports A, B, C, and D.
 * @note  CubeIDE usually does this in MX_GPIO_Init(), but it's
 * good practice to ensure it when using direct registers.
 */
void enable_gpio_clocks(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    // Enable clocks for GPIOA, GPIOB, GPIOC, GPIOD in the APB2ENR register
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN |
 8000150:	4b04      	ldr	r3, [pc, #16]	@ (8000164 <enable_gpio_clocks+0x18>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a03      	ldr	r2, [pc, #12]	@ (8000164 <enable_gpio_clocks+0x18>)
 8000156:	f043 033c 	orr.w	r3, r3, #60	@ 0x3c
 800015a:	6193      	str	r3, [r2, #24]
                    RCC_APB2ENR_IOPBEN |
                    RCC_APB2ENR_IOPCEN |
                    RCC_APB2ENR_IOPDEN;
}
 800015c:	bf00      	nop
 800015e:	46bd      	mov	sp, r7
 8000160:	bc80      	pop	{r7}
 8000162:	4770      	bx	lr
 8000164:	40021000 	.word	0x40021000

08000168 <set_pin_input>:
/**
 * @brief Sets a specific pin to be a high-impedance (Hi-Z) input.
 * @note  We use Analog Input mode (MODE=00, CNF=00) as it's the
 * best way to achieve Hi-Z and disable the digital input buffer.
 */
void set_pin_input(GPIO_TypeDef* port, uint8_t pin_num) {
 8000168:	b480      	push	{r7}
 800016a:	b085      	sub	sp, #20
 800016c:	af00      	add	r7, sp, #0
 800016e:	6078      	str	r0, [r7, #4]
 8000170:	460b      	mov	r3, r1
 8000172:	70fb      	strb	r3, [r7, #3]
    if (pin_num < 8) { // Use CRL register
 8000174:	78fb      	ldrb	r3, [r7, #3]
 8000176:	2b07      	cmp	r3, #7
 8000178:	d811      	bhi.n	800019e <set_pin_input+0x36>
        uint8_t shift = pin_num * 4;
 800017a:	78fb      	ldrb	r3, [r7, #3]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	73bb      	strb	r3, [r7, #14]
        port->CRL &= ~(0xF << shift); // Clear MODE and CNF bits
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	7bba      	ldrb	r2, [r7, #14]
 8000186:	210f      	movs	r1, #15
 8000188:	fa01 f202 	lsl.w	r2, r1, r2
 800018c:	43d2      	mvns	r2, r2
 800018e:	401a      	ands	r2, r3
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	601a      	str	r2, [r3, #0]
        port->CRL |= (0x0 << shift);  // Set MODE=00, CNF=00 (Analog Input)
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	681a      	ldr	r2, [r3, #0]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	601a      	str	r2, [r3, #0]
    } else { // Use CRH register
        uint8_t shift = (pin_num - 8) * 4;
        port->CRH &= ~(0xF << shift); // Clear MODE and CNF bits
        port->CRH |= (0x0 << shift);  // Set MODE=00, CNF=00 (Analog Input)
    }
}
 800019c:	e012      	b.n	80001c4 <set_pin_input+0x5c>
        uint8_t shift = (pin_num - 8) * 4;
 800019e:	78fb      	ldrb	r3, [r7, #3]
 80001a0:	3b08      	subs	r3, #8
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	73fb      	strb	r3, [r7, #15]
        port->CRH &= ~(0xF << shift); // Clear MODE and CNF bits
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	7bfa      	ldrb	r2, [r7, #15]
 80001ae:	210f      	movs	r1, #15
 80001b0:	fa01 f202 	lsl.w	r2, r1, r2
 80001b4:	43d2      	mvns	r2, r2
 80001b6:	401a      	ands	r2, r3
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	605a      	str	r2, [r3, #4]
        port->CRH |= (0x0 << shift);  // Set MODE=00, CNF=00 (Analog Input)
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	605a      	str	r2, [r3, #4]
}
 80001c4:	bf00      	nop
 80001c6:	3714      	adds	r7, #20
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <set_pin_output>:

/**
 * @brief Sets a specific pin to be a push-pull output (50MHz).
 */
void set_pin_output(GPIO_TypeDef* port, uint8_t pin_num) {
 80001ce:	b480      	push	{r7}
 80001d0:	b085      	sub	sp, #20
 80001d2:	af00      	add	r7, sp, #0
 80001d4:	6078      	str	r0, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	70fb      	strb	r3, [r7, #3]
    if (pin_num < 8) { // Use CRL register
 80001da:	78fb      	ldrb	r3, [r7, #3]
 80001dc:	2b07      	cmp	r3, #7
 80001de:	d816      	bhi.n	800020e <set_pin_output+0x40>
        uint8_t shift = pin_num * 4;
 80001e0:	78fb      	ldrb	r3, [r7, #3]
 80001e2:	009b      	lsls	r3, r3, #2
 80001e4:	73bb      	strb	r3, [r7, #14]
        port->CRL &= ~(0xF << shift); // Clear MODE and CNF bits
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	7bba      	ldrb	r2, [r7, #14]
 80001ec:	210f      	movs	r1, #15
 80001ee:	fa01 f202 	lsl.w	r2, r1, r2
 80001f2:	43d2      	mvns	r2, r2
 80001f4:	401a      	ands	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	601a      	str	r2, [r3, #0]
        port->CRL |= (0x3 << shift);  // Set MODE=11 (50MHz), CNF=00 (GP Output PP)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	7bba      	ldrb	r2, [r7, #14]
 8000200:	2103      	movs	r1, #3
 8000202:	fa01 f202 	lsl.w	r2, r1, r2
 8000206:	431a      	orrs	r2, r3
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
    } else { // Use CRH register
        uint8_t shift = (pin_num - 8) * 4;
        port->CRH &= ~(0xF << shift); // Clear MODE and CNF bits
        port->CRH |= (0x3 << shift);  // Set MODE=11 (50MHz), CNF=00 (GP Output PP)
    }
}
 800020c:	e017      	b.n	800023e <set_pin_output+0x70>
        uint8_t shift = (pin_num - 8) * 4;
 800020e:	78fb      	ldrb	r3, [r7, #3]
 8000210:	3b08      	subs	r3, #8
 8000212:	b2db      	uxtb	r3, r3
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	73fb      	strb	r3, [r7, #15]
        port->CRH &= ~(0xF << shift); // Clear MODE and CNF bits
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	7bfa      	ldrb	r2, [r7, #15]
 800021e:	210f      	movs	r1, #15
 8000220:	fa01 f202 	lsl.w	r2, r1, r2
 8000224:	43d2      	mvns	r2, r2
 8000226:	401a      	ands	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	605a      	str	r2, [r3, #4]
        port->CRH |= (0x3 << shift);  // Set MODE=11 (50MHz), CNF=00 (GP Output PP)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	2103      	movs	r1, #3
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	431a      	orrs	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	605a      	str	r2, [r3, #4]
}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	bc80      	pop	{r7}
 8000246:	4770      	bx	lr

08000248 <set_pin_high>:

/**
 * @brief Sets a specific pin HIGH using the atomic BSRR register.
 */
void set_pin_high(GPIO_TypeDef* port, uint8_t pin_num) {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	460b      	mov	r3, r1
 8000252:	70fb      	strb	r3, [r7, #3]
    port->BSRR = (1 << pin_num);
 8000254:	78fb      	ldrb	r3, [r7, #3]
 8000256:	2201      	movs	r2, #1
 8000258:	fa02 f303 	lsl.w	r3, r2, r3
 800025c:	461a      	mov	r2, r3
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	611a      	str	r2, [r3, #16]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr

0800026c <set_pin_low>:

/**
 * @brief Sets a specific pin LOW using the atomic BRR register.
 */
void set_pin_low(GPIO_TypeDef* port, uint8_t pin_num) {
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	460b      	mov	r3, r1
 8000276:	70fb      	strb	r3, [r7, #3]
    port->BRR = (1 << pin_num);
 8000278:	78fb      	ldrb	r3, [r7, #3]
 800027a:	2201      	movs	r2, #1
 800027c:	fa02 f303 	lsl.w	r3, r2, r3
 8000280:	461a      	mov	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	615a      	str	r2, [r3, #20]
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <set_all_pins_input>:

/**
 * @brief Sets all 20 matrix pins to high-impedance input mode.
 * This is the "all off" state for charlieplexing.
 */
void set_all_pins_input(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_PINS; i++) {
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e00f      	b.n	80002bc <set_all_pins_input+0x2c>
        set_pin_input(matrix_pins[i].port, matrix_pins[i].pin_num);
 800029c:	4a0b      	ldr	r2, [pc, #44]	@ (80002cc <set_all_pins_input+0x3c>)
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80002a4:	4909      	ldr	r1, [pc, #36]	@ (80002cc <set_all_pins_input+0x3c>)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	00db      	lsls	r3, r3, #3
 80002aa:	440b      	add	r3, r1
 80002ac:	791b      	ldrb	r3, [r3, #4]
 80002ae:	4619      	mov	r1, r3
 80002b0:	4610      	mov	r0, r2
 80002b2:	f7ff ff59 	bl	8000168 <set_pin_input>
    for (int i = 0; i < NUM_PINS; i++) {
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	3301      	adds	r3, #1
 80002ba:	607b      	str	r3, [r7, #4]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b13      	cmp	r3, #19
 80002c0:	ddec      	ble.n	800029c <set_all_pins_input+0xc>
    }
}
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	08000fd4 	.word	0x08000fd4

080002d0 <light_led>:
/**
 * @brief Lights a single LED.
 * @param anode_index The index (0-19) of the pin to set HIGH.
 * @param cathode_index The index (0-19) of the pin to set LOW.
 */
void light_led(int anode_index, int cathode_index) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b086      	sub	sp, #24
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
 80002d8:	6039      	str	r1, [r7, #0]
    // 1. Set ALL pins to Hi-Z first
    set_all_pins_input();
 80002da:	f7ff ffd9 	bl	8000290 <set_all_pins_input>

    // 2. Get the port and pin for the Anode
    GPIO_TypeDef* anode_port = matrix_pins[anode_index].port;
 80002de:	4a17      	ldr	r2, [pc, #92]	@ (800033c <light_led+0x6c>)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002e6:	617b      	str	r3, [r7, #20]
    uint8_t       anode_pin  = matrix_pins[anode_index].pin_num;
 80002e8:	4a14      	ldr	r2, [pc, #80]	@ (800033c <light_led+0x6c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	00db      	lsls	r3, r3, #3
 80002ee:	4413      	add	r3, r2
 80002f0:	791b      	ldrb	r3, [r3, #4]
 80002f2:	74fb      	strb	r3, [r7, #19]

    // 3. Get the port and pin for the Cathode
    GPIO_TypeDef* cathode_port = matrix_pins[cathode_index].port;
 80002f4:	4a11      	ldr	r2, [pc, #68]	@ (800033c <light_led+0x6c>)
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80002fc:	60fb      	str	r3, [r7, #12]
    uint8_t       cathode_pin  = matrix_pins[cathode_index].pin_num;
 80002fe:	4a0f      	ldr	r2, [pc, #60]	@ (800033c <light_led+0x6c>)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	00db      	lsls	r3, r3, #3
 8000304:	4413      	add	r3, r2
 8000306:	791b      	ldrb	r3, [r3, #4]
 8000308:	72fb      	strb	r3, [r7, #11]

    // 4. Configure Anode as Output and set it HIGH
    set_pin_output(anode_port, anode_pin);
 800030a:	7cfb      	ldrb	r3, [r7, #19]
 800030c:	4619      	mov	r1, r3
 800030e:	6978      	ldr	r0, [r7, #20]
 8000310:	f7ff ff5d 	bl	80001ce <set_pin_output>
    set_pin_high(anode_port, anode_pin);
 8000314:	7cfb      	ldrb	r3, [r7, #19]
 8000316:	4619      	mov	r1, r3
 8000318:	6978      	ldr	r0, [r7, #20]
 800031a:	f7ff ff95 	bl	8000248 <set_pin_high>

    // 5. Configure Cathode as Output and set it LOW
    set_pin_output(cathode_port, cathode_pin);
 800031e:	7afb      	ldrb	r3, [r7, #11]
 8000320:	4619      	mov	r1, r3
 8000322:	68f8      	ldr	r0, [r7, #12]
 8000324:	f7ff ff53 	bl	80001ce <set_pin_output>
    set_pin_low(cathode_port, cathode_pin);
 8000328:	7afb      	ldrb	r3, [r7, #11]
 800032a:	4619      	mov	r1, r3
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f7ff ff9d 	bl	800026c <set_pin_low>
}
 8000332:	bf00      	nop
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08000fd4 	.word	0x08000fd4

08000340 <test_all_leds>:

/**
 * @brief Call this function from main() to test all LEDs.
 * It will loop forever, scanning one LED at a time.
 */
void test_all_leds(void) {
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
    // Ensure all GPIO clocks are enabled
    enable_gpio_clocks();
 8000346:	f7ff ff01 	bl	800014c <enable_gpio_clocks>

    while (1) {
        // Loop through all pins as anodes
        for (int i = 0; i < NUM_PINS; i++) {
 800034a:	2300      	movs	r3, #0
 800034c:	607b      	str	r3, [r7, #4]
 800034e:	e015      	b.n	800037c <test_all_leds+0x3c>
            // Loop through all pins as cathodes
            for (int j = 0; j < NUM_PINS; j++) {
 8000350:	2300      	movs	r3, #0
 8000352:	603b      	str	r3, [r7, #0]
 8000354:	e00c      	b.n	8000370 <test_all_leds+0x30>
                // Skip if anode and cathode are the same pin
                if (i == j) {
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	429a      	cmp	r2, r3
 800035c:	d004      	beq.n	8000368 <test_all_leds+0x28>
                    continue;
                }

                // Light the LED defined by (anode i, cathode j)
                light_led(i, j);
 800035e:	6839      	ldr	r1, [r7, #0]
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f7ff ffb5 	bl	80002d0 <light_led>
 8000366:	e000      	b.n	800036a <test_all_leds+0x2a>
                    continue;
 8000368:	bf00      	nop
            for (int j = 0; j < NUM_PINS; j++) {
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	2b13      	cmp	r3, #19
 8000374:	ddef      	ble.n	8000356 <test_all_leds+0x16>
        for (int i = 0; i < NUM_PINS; i++) {
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	3301      	adds	r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b13      	cmp	r3, #19
 8000380:	dde6      	ble.n	8000350 <test_all_leds+0x10>
 8000382:	e7e2      	b.n	800034a <test_all_leds+0xa>

08000384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000388:	f000 f8c8 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800038c:	f000 f804 	bl	8000398 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  test_all_leds();
 8000390:	f7ff ffd6 	bl	8000340 <test_all_leds>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <main+0x10>

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b090      	sub	sp, #64	@ 0x40
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2228      	movs	r2, #40	@ 0x28
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f000 fddc 	bl	8000f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ba:	2302      	movs	r3, #2
 80003bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003be:	2301      	movs	r3, #1
 80003c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c2:	2310      	movs	r3, #16
 80003c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c6:	2302      	movs	r3, #2
 80003c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80003ca:	2300      	movs	r3, #0
 80003cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80003ce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80003d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d4:	f107 0318 	add.w	r3, r7, #24
 80003d8:	4618      	mov	r0, r3
 80003da:	f000 f9e5 	bl	80007a8 <HAL_RCC_OscConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80003e4:	f000 f819 	bl	800041a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e8:	230f      	movs	r3, #15
 80003ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ec:	2302      	movs	r3, #2
 80003ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	2300      	movs	r3, #0
 80003f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2102      	movs	r1, #2
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fc52 	bl	8000cac <HAL_RCC_ClockConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800040e:	f000 f804 	bl	800041a <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3740      	adds	r7, #64	@ 0x40
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041e:	b672      	cpsid	i
}
 8000420:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	bf00      	nop
 8000424:	e7fd      	b.n	8000422 <Error_Handler+0x8>
	...

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042e:	4b0e      	ldr	r3, [pc, #56]	@ (8000468 <HAL_MspInit+0x40>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a0d      	ldr	r2, [pc, #52]	@ (8000468 <HAL_MspInit+0x40>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6193      	str	r3, [r2, #24]
 800043a:	4b0b      	ldr	r3, [pc, #44]	@ (8000468 <HAL_MspInit+0x40>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b08      	ldr	r3, [pc, #32]	@ (8000468 <HAL_MspInit+0x40>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	4a07      	ldr	r2, [pc, #28]	@ (8000468 <HAL_MspInit+0x40>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	61d3      	str	r3, [r2, #28]
 8000452:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <HAL_MspInit+0x40>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000

0800046c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <NMI_Handler+0x4>

08000474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <MemManage_Handler+0x4>

08000484 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <BusFault_Handler+0x4>

0800048c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000490:	bf00      	nop
 8000492:	e7fd      	b.n	8000490 <UsageFault_Handler+0x4>

08000494 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f874 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004d0:	f7ff fff8 	bl	80004c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d4:	480b      	ldr	r0, [pc, #44]	@ (8000504 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004d6:	490c      	ldr	r1, [pc, #48]	@ (8000508 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004d8:	4a0c      	ldr	r2, [pc, #48]	@ (800050c <LoopFillZerobss+0x16>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004dc:	e002      	b.n	80004e4 <LoopCopyDataInit>

080004de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e2:	3304      	adds	r3, #4

080004e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e8:	d3f9      	bcc.n	80004de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ea:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004ec:	4c09      	ldr	r4, [pc, #36]	@ (8000514 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f0:	e001      	b.n	80004f6 <LoopFillZerobss>

080004f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f4:	3204      	adds	r2, #4

080004f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f8:	d3fb      	bcc.n	80004f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004fa:	f000 fd3b 	bl	8000f74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004fe:	f7ff ff41 	bl	8000384 <main>
  bx lr
 8000502:	4770      	bx	lr
  ldr r0, =_sdata
 8000504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000508:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800050c:	080010a0 	.word	0x080010a0
  ldr r2, =_sbss
 8000510:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000514:	2000002c 	.word	0x2000002c

08000518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000518:	e7fe      	b.n	8000518 <ADC1_2_IRQHandler>
	...

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	@ (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f907 	bl	8000740 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	200f      	movs	r0, #15
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f7ff ff76 	bl	8000428 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	@ (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f911 	bl	800078e <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f8e7 	bl	8000756 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000000 	.word	0x20000000
 80005a0:	20000008 	.word	0x20000008
 80005a4:	20000004 	.word	0x20000004

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <HAL_IncTick+0x1c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <HAL_IncTick+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a03      	ldr	r2, [pc, #12]	@ (80005c8 <HAL_IncTick+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000008 	.word	0x20000008
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b02      	ldr	r3, [pc, #8]	@ (80005dc <HAL_GetTick+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	20000028 	.word	0x20000028

080005e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f003 0307 	and.w	r3, r3, #7
 80005ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f6:	68ba      	ldr	r2, [r7, #8]
 80005f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005fc:	4013      	ands	r3, r2
 80005fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000612:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <__NVIC_SetPriorityGrouping+0x44>)
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	60d3      	str	r3, [r2, #12]
}
 8000618:	bf00      	nop
 800061a:	3714      	adds	r7, #20
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800062c:	4b04      	ldr	r3, [pc, #16]	@ (8000640 <__NVIC_GetPriorityGrouping+0x18>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	0a1b      	lsrs	r3, r3, #8
 8000632:	f003 0307 	and.w	r3, r3, #7
}
 8000636:	4618      	mov	r0, r3
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	6039      	str	r1, [r7, #0]
 800064e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000654:	2b00      	cmp	r3, #0
 8000656:	db0a      	blt.n	800066e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	b2da      	uxtb	r2, r3
 800065c:	490c      	ldr	r1, [pc, #48]	@ (8000690 <__NVIC_SetPriority+0x4c>)
 800065e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000662:	0112      	lsls	r2, r2, #4
 8000664:	b2d2      	uxtb	r2, r2
 8000666:	440b      	add	r3, r1
 8000668:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800066c:	e00a      	b.n	8000684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4908      	ldr	r1, [pc, #32]	@ (8000694 <__NVIC_SetPriority+0x50>)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	3b04      	subs	r3, #4
 800067c:	0112      	lsls	r2, r2, #4
 800067e:	b2d2      	uxtb	r2, r2
 8000680:	440b      	add	r3, r1
 8000682:	761a      	strb	r2, [r3, #24]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000698:	b480      	push	{r7}
 800069a:	b089      	sub	sp, #36	@ 0x24
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f1c3 0307 	rsb	r3, r3, #7
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	bf28      	it	cs
 80006b6:	2304      	movcs	r3, #4
 80006b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3304      	adds	r3, #4
 80006be:	2b06      	cmp	r3, #6
 80006c0:	d902      	bls.n	80006c8 <NVIC_EncodePriority+0x30>
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3b03      	subs	r3, #3
 80006c6:	e000      	b.n	80006ca <NVIC_EncodePriority+0x32>
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	f04f 32ff 	mov.w	r2, #4294967295
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	fa02 f303 	lsl.w	r3, r2, r3
 80006d6:	43da      	mvns	r2, r3
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	401a      	ands	r2, r3
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006e0:	f04f 31ff 	mov.w	r1, #4294967295
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	43d9      	mvns	r1, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	4313      	orrs	r3, r2
         );
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3724      	adds	r7, #36	@ 0x24
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3b01      	subs	r3, #1
 8000708:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800070c:	d301      	bcc.n	8000712 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800070e:	2301      	movs	r3, #1
 8000710:	e00f      	b.n	8000732 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000712:	4a0a      	ldr	r2, [pc, #40]	@ (800073c <SysTick_Config+0x40>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	3b01      	subs	r3, #1
 8000718:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800071a:	210f      	movs	r1, #15
 800071c:	f04f 30ff 	mov.w	r0, #4294967295
 8000720:	f7ff ff90 	bl	8000644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <SysTick_Config+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072a:	4b04      	ldr	r3, [pc, #16]	@ (800073c <SysTick_Config+0x40>)
 800072c:	2207      	movs	r2, #7
 800072e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000730:	2300      	movs	r3, #0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010

08000740 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ff49 	bl	80005e0 <__NVIC_SetPriorityGrouping>
}
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	60b9      	str	r1, [r7, #8]
 8000760:	607a      	str	r2, [r7, #4]
 8000762:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000768:	f7ff ff5e 	bl	8000628 <__NVIC_GetPriorityGrouping>
 800076c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	68b9      	ldr	r1, [r7, #8]
 8000772:	6978      	ldr	r0, [r7, #20]
 8000774:	f7ff ff90 	bl	8000698 <NVIC_EncodePriority>
 8000778:	4602      	mov	r2, r0
 800077a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077e:	4611      	mov	r1, r2
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff ff5f 	bl	8000644 <__NVIC_SetPriority>
}
 8000786:	bf00      	nop
 8000788:	3718      	adds	r7, #24
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b082      	sub	sp, #8
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffb0 	bl	80006fc <SysTick_Config>
 800079c:	4603      	mov	r3, r0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
 80007b8:	e272      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f000 8087 	beq.w	80008d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007c8:	4b92      	ldr	r3, [pc, #584]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f003 030c 	and.w	r3, r3, #12
 80007d0:	2b04      	cmp	r3, #4
 80007d2:	d00c      	beq.n	80007ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80007d4:	4b8f      	ldr	r3, [pc, #572]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f003 030c 	and.w	r3, r3, #12
 80007dc:	2b08      	cmp	r3, #8
 80007de:	d112      	bne.n	8000806 <HAL_RCC_OscConfig+0x5e>
 80007e0:	4b8c      	ldr	r3, [pc, #560]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80007e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80007ec:	d10b      	bne.n	8000806 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ee:	4b89      	ldr	r3, [pc, #548]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d06c      	beq.n	80008d4 <HAL_RCC_OscConfig+0x12c>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d168      	bne.n	80008d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e24c      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800080e:	d106      	bne.n	800081e <HAL_RCC_OscConfig+0x76>
 8000810:	4b80      	ldr	r3, [pc, #512]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a7f      	ldr	r2, [pc, #508]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000816:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800081a:	6013      	str	r3, [r2, #0]
 800081c:	e02e      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d10c      	bne.n	8000840 <HAL_RCC_OscConfig+0x98>
 8000826:	4b7b      	ldr	r3, [pc, #492]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a7a      	ldr	r2, [pc, #488]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800082c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000830:	6013      	str	r3, [r2, #0]
 8000832:	4b78      	ldr	r3, [pc, #480]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a77      	ldr	r2, [pc, #476]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000838:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800083c:	6013      	str	r3, [r2, #0]
 800083e:	e01d      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000848:	d10c      	bne.n	8000864 <HAL_RCC_OscConfig+0xbc>
 800084a:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a71      	ldr	r2, [pc, #452]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000850:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b6f      	ldr	r3, [pc, #444]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a6e      	ldr	r2, [pc, #440]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800085c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	e00b      	b.n	800087c <HAL_RCC_OscConfig+0xd4>
 8000864:	4b6b      	ldr	r3, [pc, #428]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a6a      	ldr	r2, [pc, #424]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800086a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800086e:	6013      	str	r3, [r2, #0]
 8000870:	4b68      	ldr	r3, [pc, #416]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a67      	ldr	r2, [pc, #412]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000884:	f7ff fea2 	bl	80005cc <HAL_GetTick>
 8000888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800088a:	e008      	b.n	800089e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800088c:	f7ff fe9e 	bl	80005cc <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	2b64      	cmp	r3, #100	@ 0x64
 8000898:	d901      	bls.n	800089e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800089a:	2303      	movs	r3, #3
 800089c:	e200      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800089e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f0      	beq.n	800088c <HAL_RCC_OscConfig+0xe4>
 80008aa:	e014      	b.n	80008d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ac:	f7ff fe8e 	bl	80005cc <HAL_GetTick>
 80008b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008b2:	e008      	b.n	80008c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fe8a 	bl	80005cc <HAL_GetTick>
 80008b8:	4602      	mov	r2, r0
 80008ba:	693b      	ldr	r3, [r7, #16]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	2b64      	cmp	r3, #100	@ 0x64
 80008c0:	d901      	bls.n	80008c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e1ec      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008c6:	4b53      	ldr	r3, [pc, #332]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f0      	bne.n	80008b4 <HAL_RCC_OscConfig+0x10c>
 80008d2:	e000      	b.n	80008d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d063      	beq.n	80009aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80008e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	f003 030c 	and.w	r3, r3, #12
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d00b      	beq.n	8000906 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008ee:	4b49      	ldr	r3, [pc, #292]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008f0:	685b      	ldr	r3, [r3, #4]
 80008f2:	f003 030c 	and.w	r3, r3, #12
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d11c      	bne.n	8000934 <HAL_RCC_OscConfig+0x18c>
 80008fa:	4b46      	ldr	r3, [pc, #280]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d116      	bne.n	8000934 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000906:	4b43      	ldr	r3, [pc, #268]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	2b00      	cmp	r3, #0
 8000910:	d005      	beq.n	800091e <HAL_RCC_OscConfig+0x176>
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d001      	beq.n	800091e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
 800091c:	e1c0      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800091e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4939      	ldr	r1, [pc, #228]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800092e:	4313      	orrs	r3, r2
 8000930:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000932:	e03a      	b.n	80009aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	691b      	ldr	r3, [r3, #16]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d020      	beq.n	800097e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800093c:	4b36      	ldr	r3, [pc, #216]	@ (8000a18 <HAL_RCC_OscConfig+0x270>)
 800093e:	2201      	movs	r2, #1
 8000940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000942:	f7ff fe43 	bl	80005cc <HAL_GetTick>
 8000946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000948:	e008      	b.n	800095c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800094a:	f7ff fe3f 	bl	80005cc <HAL_GetTick>
 800094e:	4602      	mov	r2, r0
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	1ad3      	subs	r3, r2, r3
 8000954:	2b02      	cmp	r3, #2
 8000956:	d901      	bls.n	800095c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000958:	2303      	movs	r3, #3
 800095a:	e1a1      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095c:	4b2d      	ldr	r3, [pc, #180]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f003 0302 	and.w	r3, r3, #2
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0f0      	beq.n	800094a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000968:	4b2a      	ldr	r3, [pc, #168]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4927      	ldr	r1, [pc, #156]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 8000978:	4313      	orrs	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
 800097c:	e015      	b.n	80009aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800097e:	4b26      	ldr	r3, [pc, #152]	@ (8000a18 <HAL_RCC_OscConfig+0x270>)
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000984:	f7ff fe22 	bl	80005cc <HAL_GetTick>
 8000988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800098a:	e008      	b.n	800099e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800098c:	f7ff fe1e 	bl	80005cc <HAL_GetTick>
 8000990:	4602      	mov	r2, r0
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	2b02      	cmp	r3, #2
 8000998:	d901      	bls.n	800099e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800099a:	2303      	movs	r3, #3
 800099c:	e180      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d1f0      	bne.n	800098c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d03a      	beq.n	8000a2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d019      	beq.n	80009f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009be:	4b17      	ldr	r3, [pc, #92]	@ (8000a1c <HAL_RCC_OscConfig+0x274>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c4:	f7ff fe02 	bl	80005cc <HAL_GetTick>
 80009c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009ca:	e008      	b.n	80009de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009cc:	f7ff fdfe 	bl	80005cc <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b02      	cmp	r3, #2
 80009d8:	d901      	bls.n	80009de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80009da:	2303      	movs	r3, #3
 80009dc:	e160      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_RCC_OscConfig+0x26c>)
 80009e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f0      	beq.n	80009cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009ea:	2001      	movs	r0, #1
 80009ec:	f000 fa9c 	bl	8000f28 <RCC_Delay>
 80009f0:	e01c      	b.n	8000a2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009f2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <HAL_RCC_OscConfig+0x274>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009f8:	f7ff fde8 	bl	80005cc <HAL_GetTick>
 80009fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009fe:	e00f      	b.n	8000a20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000a00:	f7ff fde4 	bl	80005cc <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b02      	cmp	r3, #2
 8000a0c:	d908      	bls.n	8000a20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	e146      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	42420000 	.word	0x42420000
 8000a1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a20:	4b92      	ldr	r3, [pc, #584]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a24:	f003 0302 	and.w	r3, r3, #2
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d1e9      	bne.n	8000a00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	f000 80a6 	beq.w	8000b86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a3e:	4b8b      	ldr	r3, [pc, #556]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a40:	69db      	ldr	r3, [r3, #28]
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10d      	bne.n	8000a66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b88      	ldr	r3, [pc, #544]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a87      	ldr	r2, [pc, #540]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b85      	ldr	r3, [pc, #532]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a62:	2301      	movs	r3, #1
 8000a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a66:	4b82      	ldr	r3, [pc, #520]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d118      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a72:	4b7f      	ldr	r3, [pc, #508]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a7e      	ldr	r2, [pc, #504]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fda5 	bl	80005cc <HAL_GetTick>
 8000a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a84:	e008      	b.n	8000a98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a86:	f7ff fda1 	bl	80005cc <HAL_GetTick>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	2b64      	cmp	r3, #100	@ 0x64
 8000a92:	d901      	bls.n	8000a98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a94:	2303      	movs	r3, #3
 8000a96:	e103      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a98:	4b75      	ldr	r3, [pc, #468]	@ (8000c70 <HAL_RCC_OscConfig+0x4c8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f0      	beq.n	8000a86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d106      	bne.n	8000aba <HAL_RCC_OscConfig+0x312>
 8000aac:	4b6f      	ldr	r3, [pc, #444]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	4a6e      	ldr	r2, [pc, #440]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6213      	str	r3, [r2, #32]
 8000ab8:	e02d      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d10c      	bne.n	8000adc <HAL_RCC_OscConfig+0x334>
 8000ac2:	4b6a      	ldr	r3, [pc, #424]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ac4:	6a1b      	ldr	r3, [r3, #32]
 8000ac6:	4a69      	ldr	r2, [pc, #420]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ac8:	f023 0301 	bic.w	r3, r3, #1
 8000acc:	6213      	str	r3, [r2, #32]
 8000ace:	4b67      	ldr	r3, [pc, #412]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	4a66      	ldr	r2, [pc, #408]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ad4:	f023 0304 	bic.w	r3, r3, #4
 8000ad8:	6213      	str	r3, [r2, #32]
 8000ada:	e01c      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	2b05      	cmp	r3, #5
 8000ae2:	d10c      	bne.n	8000afe <HAL_RCC_OscConfig+0x356>
 8000ae4:	4b61      	ldr	r3, [pc, #388]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000ae6:	6a1b      	ldr	r3, [r3, #32]
 8000ae8:	4a60      	ldr	r2, [pc, #384]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	6213      	str	r3, [r2, #32]
 8000af0:	4b5e      	ldr	r3, [pc, #376]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	4a5d      	ldr	r2, [pc, #372]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	6213      	str	r3, [r2, #32]
 8000afc:	e00b      	b.n	8000b16 <HAL_RCC_OscConfig+0x36e>
 8000afe:	4b5b      	ldr	r3, [pc, #364]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	4a5a      	ldr	r2, [pc, #360]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	6213      	str	r3, [r2, #32]
 8000b0a:	4b58      	ldr	r3, [pc, #352]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a57      	ldr	r2, [pc, #348]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b10:	f023 0304 	bic.w	r3, r3, #4
 8000b14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	68db      	ldr	r3, [r3, #12]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d015      	beq.n	8000b4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fd55 	bl	80005cc <HAL_GetTick>
 8000b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b24:	e00a      	b.n	8000b3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b26:	f7ff fd51 	bl	80005cc <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d901      	bls.n	8000b3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e0b1      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b3e:	6a1b      	ldr	r3, [r3, #32]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0ee      	beq.n	8000b26 <HAL_RCC_OscConfig+0x37e>
 8000b48:	e014      	b.n	8000b74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b4a:	f7ff fd3f 	bl	80005cc <HAL_GetTick>
 8000b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b50:	e00a      	b.n	8000b68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f7ff fd3b 	bl	80005cc <HAL_GetTick>
 8000b56:	4602      	mov	r2, r0
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e09b      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b68:	4b40      	ldr	r3, [pc, #256]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b6a:	6a1b      	ldr	r3, [r3, #32]
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1ee      	bne.n	8000b52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d105      	bne.n	8000b86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	4a3b      	ldr	r2, [pc, #236]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000b84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	69db      	ldr	r3, [r3, #28]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8087 	beq.w	8000c9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b90:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f003 030c 	and.w	r3, r3, #12
 8000b98:	2b08      	cmp	r3, #8
 8000b9a:	d061      	beq.n	8000c60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	69db      	ldr	r3, [r3, #28]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d146      	bne.n	8000c32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ba4:	4b33      	ldr	r3, [pc, #204]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000baa:	f7ff fd0f 	bl	80005cc <HAL_GetTick>
 8000bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bb0:	e008      	b.n	8000bc4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bb2:	f7ff fd0b 	bl	80005cc <HAL_GetTick>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	1ad3      	subs	r3, r2, r3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d901      	bls.n	8000bc4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e06d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc4:	4b29      	ldr	r3, [pc, #164]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d1f0      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6a1b      	ldr	r3, [r3, #32]
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000bd8:	d108      	bne.n	8000bec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000bda:	4b24      	ldr	r3, [pc, #144]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	4921      	ldr	r1, [pc, #132]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bec:	4b1f      	ldr	r3, [pc, #124]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a19      	ldr	r1, [r3, #32]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bfc:	430b      	orrs	r3, r1
 8000bfe:	491b      	ldr	r1, [pc, #108]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c00:	4313      	orrs	r3, r2
 8000c02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c04:	4b1b      	ldr	r3, [pc, #108]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fcdf 	bl	80005cc <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c12:	f7ff fcdb 	bl	80005cc <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e03d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c24:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x46a>
 8000c30:	e035      	b.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <HAL_RCC_OscConfig+0x4cc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcc8 	bl	80005cc <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000c40:	f7ff fcc4 	bl	80005cc <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e026      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_RCC_OscConfig+0x4c4>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f0      	bne.n	8000c40 <HAL_RCC_OscConfig+0x498>
 8000c5e:	e01e      	b.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e019      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40007000 	.word	0x40007000
 8000c74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_RCC_OscConfig+0x500>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a1b      	ldr	r3, [r3, #32]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d106      	bne.n	8000c9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e000      	b.n	8000ca0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000c9e:	2300      	movs	r3, #0
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3718      	adds	r7, #24
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000

08000cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d101      	bne.n	8000cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e0d0      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d910      	bls.n	8000cf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cce:	4b67      	ldr	r3, [pc, #412]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f023 0207 	bic.w	r2, r3, #7
 8000cd6:	4965      	ldr	r1, [pc, #404]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cde:	4b63      	ldr	r3, [pc, #396]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d001      	beq.n	8000cf0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e0b8      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d020      	beq.n	8000d3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d005      	beq.n	8000d14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d08:	4b59      	ldr	r3, [pc, #356]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4a58      	ldr	r2, [pc, #352]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000d12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0308 	and.w	r3, r3, #8
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d20:	4b53      	ldr	r3, [pc, #332]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	4a52      	ldr	r2, [pc, #328]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d26:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000d2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d2c:	4b50      	ldr	r3, [pc, #320]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	494d      	ldr	r1, [pc, #308]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d040      	beq.n	8000dcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d107      	bne.n	8000d62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d52:	4b47      	ldr	r3, [pc, #284]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d115      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e07f      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d107      	bne.n	8000d7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d6a:	4b41      	ldr	r3, [pc, #260]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d109      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e073      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0302 	and.w	r3, r3, #2
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d101      	bne.n	8000d8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e06b      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d8a:	4b39      	ldr	r3, [pc, #228]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f023 0203 	bic.w	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	4936      	ldr	r1, [pc, #216]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d9c:	f7ff fc16 	bl	80005cc <HAL_GetTick>
 8000da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000da2:	e00a      	b.n	8000dba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da4:	f7ff fc12 	bl	80005cc <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e053      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f003 020c 	and.w	r2, r3, #12
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d1eb      	bne.n	8000da4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0307 	and.w	r3, r3, #7
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d210      	bcs.n	8000dfc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f023 0207 	bic.w	r2, r3, #7
 8000de2:	4922      	ldr	r1, [pc, #136]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dea:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_RCC_ClockConfig+0x1c0>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d001      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e032      	b.n	8000e62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e08:	4b19      	ldr	r3, [pc, #100]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	4916      	ldr	r1, [pc, #88]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d009      	beq.n	8000e3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	490e      	ldr	r1, [pc, #56]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e36:	4313      	orrs	r3, r2
 8000e38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000e3a:	f000 f821 	bl	8000e80 <HAL_RCC_GetSysClockFreq>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	4b0b      	ldr	r3, [pc, #44]	@ (8000e70 <HAL_RCC_ClockConfig+0x1c4>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	490a      	ldr	r1, [pc, #40]	@ (8000e74 <HAL_RCC_ClockConfig+0x1c8>)
 8000e4c:	5ccb      	ldrb	r3, [r1, r3]
 8000e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e52:	4a09      	ldr	r2, [pc, #36]	@ (8000e78 <HAL_RCC_ClockConfig+0x1cc>)
 8000e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_RCC_ClockConfig+0x1d0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fb74 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40022000 	.word	0x40022000
 8000e70:	40021000 	.word	0x40021000
 8000e74:	08001074 	.word	0x08001074
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b087      	sub	sp, #28
 8000e84:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 030c 	and.w	r3, r3, #12
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d002      	beq.n	8000eb0 <HAL_RCC_GetSysClockFreq+0x30>
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d003      	beq.n	8000eb6 <HAL_RCC_GetSysClockFreq+0x36>
 8000eae:	e027      	b.n	8000f00 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000eb2:	613b      	str	r3, [r7, #16]
      break;
 8000eb4:	e027      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	4a17      	ldr	r2, [pc, #92]	@ (8000f1c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000ec0:	5cd3      	ldrb	r3, [r2, r3]
 8000ec2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d010      	beq.n	8000ef0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_RCC_GetSysClockFreq+0x94>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	0c5b      	lsrs	r3, r3, #17
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	4a11      	ldr	r2, [pc, #68]	@ (8000f20 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000ee2:	fb03 f202 	mul.w	r2, r3, r2
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	e004      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000ef4:	fb02 f303 	mul.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	613b      	str	r3, [r7, #16]
      break;
 8000efe:	e002      	b.n	8000f06 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_RCC_GetSysClockFreq+0x98>)
 8000f02:	613b      	str	r3, [r7, #16]
      break;
 8000f04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000f06:	693b      	ldr	r3, [r7, #16]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	371c      	adds	r7, #28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	007a1200 	.word	0x007a1200
 8000f1c:	08001084 	.word	0x08001084
 8000f20:	08001094 	.word	0x08001094
 8000f24:	003d0900 	.word	0x003d0900

08000f28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <RCC_Delay+0x34>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0a      	ldr	r2, [pc, #40]	@ (8000f60 <RCC_Delay+0x38>)
 8000f36:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3a:	0a5b      	lsrs	r3, r3, #9
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f44:	bf00      	nop
  }
  while (Delay --);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1e5a      	subs	r2, r3, #1
 8000f4a:	60fa      	str	r2, [r7, #12]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f9      	bne.n	8000f44 <RCC_Delay+0x1c>
}
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	10624dd3 	.word	0x10624dd3

08000f64 <memset>:
 8000f64:	4603      	mov	r3, r0
 8000f66:	4402      	add	r2, r0
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d100      	bne.n	8000f6e <memset+0xa>
 8000f6c:	4770      	bx	lr
 8000f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8000f72:	e7f9      	b.n	8000f68 <memset+0x4>

08000f74 <__libc_init_array>:
 8000f74:	b570      	push	{r4, r5, r6, lr}
 8000f76:	2600      	movs	r6, #0
 8000f78:	4d0c      	ldr	r5, [pc, #48]	@ (8000fac <__libc_init_array+0x38>)
 8000f7a:	4c0d      	ldr	r4, [pc, #52]	@ (8000fb0 <__libc_init_array+0x3c>)
 8000f7c:	1b64      	subs	r4, r4, r5
 8000f7e:	10a4      	asrs	r4, r4, #2
 8000f80:	42a6      	cmp	r6, r4
 8000f82:	d109      	bne.n	8000f98 <__libc_init_array+0x24>
 8000f84:	f000 f81a 	bl	8000fbc <_init>
 8000f88:	2600      	movs	r6, #0
 8000f8a:	4d0a      	ldr	r5, [pc, #40]	@ (8000fb4 <__libc_init_array+0x40>)
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb8 <__libc_init_array+0x44>)
 8000f8e:	1b64      	subs	r4, r4, r5
 8000f90:	10a4      	asrs	r4, r4, #2
 8000f92:	42a6      	cmp	r6, r4
 8000f94:	d105      	bne.n	8000fa2 <__libc_init_array+0x2e>
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
 8000f98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f9c:	4798      	blx	r3
 8000f9e:	3601      	adds	r6, #1
 8000fa0:	e7ee      	b.n	8000f80 <__libc_init_array+0xc>
 8000fa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000fa6:	4798      	blx	r3
 8000fa8:	3601      	adds	r6, #1
 8000faa:	e7f2      	b.n	8000f92 <__libc_init_array+0x1e>
 8000fac:	08001098 	.word	0x08001098
 8000fb0:	08001098 	.word	0x08001098
 8000fb4:	08001098 	.word	0x08001098
 8000fb8:	0800109c 	.word	0x0800109c

08000fbc <_init>:
 8000fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fbe:	bf00      	nop
 8000fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fc2:	bc08      	pop	{r3}
 8000fc4:	469e      	mov	lr, r3
 8000fc6:	4770      	bx	lr

08000fc8 <_fini>:
 8000fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fca:	bf00      	nop
 8000fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fce:	bc08      	pop	{r3}
 8000fd0:	469e      	mov	lr, r3
 8000fd2:	4770      	bx	lr
